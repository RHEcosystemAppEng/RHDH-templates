# Edit the template parameters below to see how they will render in the scaffolder form UI
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# This template is used to create a chatbot rag blueprint using llamastack with vllm
metadata:
  name: chatbot-rag-blueprint-template
  title: creates a rag blueprint using llamastack with vllm
  description: creates a rag blueprint using llamastack with vllm
  tags:
    - recommended
    - python
    - ai
    - rhoai
    - rag
    - rhtap
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  owner: rhdh
  type: service
  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Application Information
      required:
        - name
        - owner
      properties:
        name:
          title: Name
          type: string
          description: Unique identifier for the component
          default: chatbot-app
          ui:autofocus: true
          ui:options:
            rows: 5
        description:
          title: Description
          type: string
          description: Description of the component
          default: chatbot rag app
          maxLength: 63
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          default: user:guest
          ui:options:
            catalogFilter:
              kind: [Group, User]
              readonly: false
    
    - title: Application Repository Location
      required:
        - hostType
        - repoOwner
        - repoName
        - branch
      properties:
        hostType:
          title: Host Type
          type: string
          enum:
            - GitHub
            - GitLab
          default: GitHub
        repoOwner:
          title: Repository Owner
          type: string
          ui:help: The organization, user or project that this repo will belong to
        repoName:
          title: Repository Name
          type: string
        branch:
          title: Repository Default Branch
          type: string
          default: main
      dependency:
        hostType:
          oneOf:
            - required:
                - githubServer
              properties:
                hostType:
                  const: GitHub
                githubServer:
                  title: Repository Server
                  type: string
                  default: github.com
                  ui:help: "You can also provide the on-prem github server, example: github-github.apps.cluster-ljg9z.sandbox219.opentlc.com"
            - required:
                - gitlabServer
              properties:
                hostType:
                  const: GitLab
                gitlabServer:
                  title: Repository Server
                  type: string
                  default: gitlab.com
                  ui:help: "You can also provide the on-prem gitlab server, example: gitlab-gitlab.apps.cluster-ljg9z.sandbox219.opentlc.com"
  
    - title: Choose a model
      required:
        - model
      properties:
        model:
          title: Model
          type: string
          description: choose your LLM model
          default: ibm-granite/granite-3.2-8b-instruct
          enum:
          - meta-llama/Llama-3.2-3B-Instruct
          - ibm-granite/granite-3.2-8b-instruct
        token:
          title: Hugging Face Token
          type: string
          description: Enter your Hugging Face token
        enbableGPUSupport:
          title: Enable GPU Support 
          type: boolean
          # ui:widget: radio
          description: defaults to cpu
      dependencies:
        enbableGPUSupport:
          allOf:
            - if:
                properties: 
                  enbableGPUSupport:
                    const: true
              then:
                properties:
                  createGPU:
                    title: Create GPU
                    type: boolean
                    description: provision your own gpu
    - title: Application Namespace
      required:
        - namespace
      properties:
        namespace:
          title: Namespace
          type: string
          description: The namespace where the application will be deployed
          default: chatbot-app-ns
  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: Fetch Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: source
        values:
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          description: Deploy llamastack with vllm and rag
          owner: ${{ parameters.owner }}
          #repoUrl: ${{ parameters.repoUrl }}
          model: ${{ parameters.model }}
          token: ${{ parameters.token }}
          enbableGPUSupport: ${{ parameters.enbableGPUSupport }}
          createGPU: ${{ parameters.createGPU }}
          defaultBranch: ${{ parameters.branch }}    
    - id: publish-github
      name: Publish rag app to Github
      action: publish:github
      if: ${{ parameters.hostType === 'GitHub' }}
      input:
        allowedHosts: ['${{ parameters.githubServer }}']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.githubServer }}?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}
        defaultBranch: ${{ parameters.branch }}
        protectDefaultBranch: true
        allowAutoMerge: true
        deleteBranchOnMerge: true
        requiredStatusCheckContexts: []
        repoVisibility: "public"
        requiredApprovingReviewCount: 0
    # This action creates a new GitLab repository and publishes the files in the workspace directory to the repository.
    # - id: publish-gitlab
    #   name: Publish Repository to GitLab
    #   action: publish:gitlab
    #   if: ${{ parameters.hostType === 'GitLab' }}
    #   input:
    #     sourcePath: source
    #     allowedHosts: ['${{ parameters.gitlabServer }}']
    #     description: This is ${{ parameters.name }}
    #     repoUrl: ${{ parameters.gitlabServer }}?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}
    #     defaultBranch: ${{ parameters.branch }}
    #     protectDefaultBranch: false
    #     repoVisibility: "public"
    - id: fetch-gitops-deployment
      name: fetch Gitops Skeleton
      action: fetch:template
      input:
        url: ./manifests
        copyWithoutTemplating:
          - '**/*.jinja'
          - '**/*.jinja2'
        values:
          name: ${{ parameters.name }}
          appName: ${{ parameters.name }}-gitops
          namespace: ${{ parameters.namespace }}
          description: This is GitOps manifest for ${{ parameters.name }}
          rhdhNamespace: ai-rhdh
          repoURL: https://${{ parameters.githubServer if parameters.hostType === 'GitHub' else parameters.gitlabServer }}/${{ parameters.repoOwner }}/${{ parameters.repoName }}-gitops
          srcRepoURL: https://${{ parameters.githubServer if parameters.hostType === 'GitHub' else parameters.gitlabServer }}/${{ parameters.repoOwner }}/${{ parameters.repoName }}
          argoComponentOverlays: './components/${{ parameters.name }}/overlays'
          owner: ${{ parameters.owner }}
          argoNS: ai-rhdh
          argoProject: default
          model: ${{ parameters.model }}
          token: ${{ parameters.token }}
          enbableGPUSupport: ${{ parameters.enbableGPUSupport }}
          createGPU: ${{ parameters.createGPU }}
        targetPath: ./tenant-gitops
    - id: publish-github-gitops
      name: Publish GitOps Repository to Github
      action: publish:github
      if: ${{ parameters.hostType === 'GitHub' }}
      input:
        repoUrl: ${{ parameters.githubServer }}?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}-gitops
        sourcePath: ./tenant-gitops
        allowedHosts: ['${{ parameters.githubServer }}']
        description: This is GitOps repository for ${{ parameters.name }}
        repoVisibility: "public"
        defaultBranch: "main"
        protectDefaultBranch: false
    # This action creates a new GitLab repository and publishes the files in the workspace directory to the repository.
    # - id: publish-gitlab-gitops
    #   name: Publish GitOps Repository to GitLab
    #   action: publish:gitlab
    #   if: ${{ parameters.hostType === 'GitLab' }}
    #   input:
    #     sourcePath: ./tenant-gitops
    #     allowedHosts: ['${{ parameters.gitlabServer }}']
    #     description: This is GitOps repository for ${{ parameters.name }}
    #     repoUrl: ${{ parameters.gitlabServer }}?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}-gitops
    #     defaultBranch: "main"
    #     protectDefaultBranch: false
    #     repoVisibility: "public"
    - id: wait-for-github-repository
      name: Waiting for Repository Availability
      action: 'debug:wait'
      input:
        seconds: 3
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl:  ${{ steps['publish-github'].output.repoContentsUrl if steps['publish-github'].output else steps['publish-gitlab'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"
    # SED_APP_SUPPORT_END
    - id: register-gitops
      name: Register Gitops
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish-github-gitops'].output.repoContentsUrl if steps['publish-github-gitops'].output else steps['publish-gitlab-gitops'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.name }}-app-of-apps
        argoInstance: default
        namespace: ai-rhdh
        repoUrl: https://${{ parameters.githubServer if parameters.hostType === 'GitHub' else parameters.gitlabServer }}/${{ parameters.repoOwner }}/${{ parameters.repoName }}-gitops.git
        path: 'argocd/'
    
  output:
    links:
      # SED_APP_SUPPORT_START
      - title: Source Repository
        url: ${{ steps['publish-github'].output.remoteUrl if steps['publish-github'].output else steps['publish-gitlab'].output.remoteUrl }}
      # SED_APP_SUPPORT_END
      - title: GitOps Repository
        url: ${{ steps['publish-github-gitops'].output.remoteUrl if steps['publish-github-gitops'].output else steps['publish-gitlab-gitops'].output.remoteUrl }}
      # SED_APP_SUPPORT_START
      - title: Open Component in Catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
      # SED_APP_SUPPORT_END
      - title: Open GitOps Resource in Catalog
        icon: catalog
        entityRef: ${{ steps['register-gitops'].output.entityRef }}
