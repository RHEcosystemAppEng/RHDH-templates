# Edit the template parameters below to see how they will render in the scaffolder form UI
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# This template is used to create a chatbot rag kickstart using llamastack with vllm
metadata:
  name: virtual-agent-kickstart-template
  title: AI Virtual Agent using OpenShift AI, and PGVector via GitOps
  description:
    This template will ask some basic information about your application and create a GitOps repository with the necessary resources to deploy the AI Virtual Agent application using OpenShift AI, and PGVector.
    - ai
    - virtual-agent
    - template
    - openshift
    - ai-kickstart-template
    - chatbot
    - rag
    - vllm
    - llama
    - pgvector
    - openshift-ai
    - gitops
    - python
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  owner: rhdh
  type: service
  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Application Information
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique identifier for the component
          default: virtual-agent
          ui:autofocus: true
          ui:options:
            rows: 5
        description:
          title: Description
          type: string
          description: Description of the component
          default: AI Virtual Agent
          maxLength: 63
    - title: Application Repository Location
      required:
        - hostType
        - repoOwner
        - repoName
        - branch
      properties:
        hostType:
          title: Host Type
          type: string
          enum:
            - GitHub
            - GitLab
          default: GitLab
        repoOwner:
          title: Repository Owner
          type: string
          default: development
          ui:help: The organization, user or project that this repo will belong to
        repoName:
          title: Repository Name
          type: string
          default: ai-virtual-agent-app
        branch:
          title: Repository Default Branch
          type: string
          default: main
      dependencies:
        hostType:
          oneOf:
            - required:
                - githubServer
              properties:
                hostType:
                  const: GitHub
                githubServer:
                  title: Repository Server
                  type: string
                  default: github.com
                  ui:help:
                    "You can also provide the on-prem github server, example:
                    github-github.apps.cluster-ljg9z.sandbox219.opentlc.com"
            - required:
                - gitlabServer
              properties:
                hostType:
                  const: GitLab
                gitlabServer:
                  title: Repository Server
                  type: string
                  default: gitlab.com
                  ui:help:
                    "You can also provide the on-prem gitlab server, example:
                    gitlab-gitlab.apps.cluster-ljg9z.sandbox219.opentlc.com"
    - title: Select Language Model
      required:
        - llm
      properties:
        llm:
          title: Model
          type: string
          description: choose your LLM model
          default: llama-3-2-1b-instruct
          enum:
            - llama-3-2-1b-instruct
            - llama-3-2-3b-instruct
            - llama-3-3-70b-instruct
        llm_toleration:
          title: LLM Toleration
          type: string
          description: LLM toleration
          default: nvidia.com/gpu
    - title: Select Safety Model
      properties:
        enableSafety:
          title: Enable Safety
          type: boolean
          description: Enable safety model
          default: false
      dependencies:
        enableSafety:
          allOf:
            - if:
                properties:
                  enableSafety:
                    const: true
              then:
                properties:
                  safety:
                    title: Safety Model
                    type: string
                    description: Choose your Safety model
                    default: llama-guard-3-1b
                    enum:
                      - llama-guard-3-1b
                      - llama-guard-3-8b
                  safety_toleration:
                    title: Safety Toleration
                    type: string
                    description: toleration
                    default: nvidia.com/gpu
                required:
                  - safety
    - title: Default Ingestion Pipeline
      properties:
        injection_pipeline_name:
          title: Ingestion Pipeline Name
          type: string
          description: Ingestion pipeline name
          default: vector-db
          ui:disabled: true
        injection_pipeline_version:
          title: Ingestion Pipeline Version
          type: string
          description: Ingestion pipeline version
          default: v1.0
          ui:disabled: true
        access_key_id:
          title: Access Key ID
          type: string
          description: Minio access key id
          default: minio_rag_user
          ui:disabled: true
        secret_access_key:
          title: Secret Access Key
          type: string
          description: Minio secret access key
          default: minio_rag_password
          ui:disabled: true
        bucket_name:
          title: Bucket Name
          type: string
          description: Minio bucket name
          default: documents
          ui:disabled: true
        endpoint_url:
          title: Endpoint URL
          type: string
          description: Endpoint URL
          default: http://minio:9000
          ui:disabled: true
        region:
          title: Region
          type: string
          description: s3 region
          default: us-east-1
          ui:disabled: true
    - title: Application Namespace
      required:
        - namespace
      properties:
        namespace:
          title: Namespace
          type: string
          description: The namespace where the application will be deployed
          default: ai-agent
    - title: Argo CD Configuration
      required:
        - argoInstance
      properties:
        argoInstance:
          title: Argo CD Instance Name
          type: string
          default: main
          description:
            Enter the logical name of the Argo CD instance as configured in
            Developer Hub (e.g., 'default')
  steps:
    - id: fetch-all-ai-virtual-agent-kickstart
      name: Fetch ai-virtual-agent-kickstart
      action: fetch:plain
      input:
        url: https://github.com/rh-ai-kickstart/ai-virtual-agent
        targetPath: ./tenant
        copyWithoutTemplating:
          - "**/*.jinja"
          - "**/*.jinja2"
    - id: deleteFiles
      name: Delete unwanted files
      action: fs:delete
      input:
        files:
          - ./tenant/.github
          - ./tenant/.ansible-lint
    - id: fetch-ai-virtual-agent-kickstart-helm
      name: Fetch ai-virtual-agent-kickstart Helm Chart
      action: fetch:plain
      input:
        url: https://github.com/rh-ai-kickstart/ai-virtual-agent/tree/main/helm
        targetPath: ./tenant-gitops/helm
        copyWithoutTemplating:
          - "**/*.jinja"
          - "**/*.jinja2"
    - id: fetch-skeleton
      name: Fetch catalog-info from local Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: ./tenant
        copyWithoutTemplating:
          - "**/*.jinja"
          - "**/*.jinja2"
        values:
          name: ${{ parameters.name }}
          description: Deploy AI Virtual Assistant Chatbot using LLaMA Stack, OpenShift AI, and PGVector
          owner: ${{ user.entity.metadata.name }}
          repoOwner: ${{ parameters.repoOwner }}
          model: ${{ parameters.model }}
          destination: ${{ parameters.repoOwner }}/${{ parameters.name }}
    - id: fetch-helm-template
      name: Fetch Helm Chart from local Template
      action: fetch:template
      input:
        url: ./manifests/helm/templates
        targetPath: ./tenant-gitops/helm/templates
        copyWithoutTemplating:
          - "**/*.jinja"
          - "**/*.jinja2"
    - id: fetch-argocd
      name: Fetch Argo CD Resources from Local Template
      action: fetch:template
      input:
        url: ./manifests/argocd
        targetPath: ./tenant-gitops/argocd
        copyWithoutTemplating:
          - "**/*.jinja"
          - "**/*.jinja2"
        values:
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          description: This is GitOps manifest for ${{ parameters.name }}
          repoURL:
            https://${{ parameters.githubServer if parameters.hostType === 'GitHub'
            else parameters.gitlabServer }}/${{ parameters.repoOwner }}/${{
            parameters.repoName }}-gitops.git
          owner: ${{ user.entity.metadata.name }}
          llm: ${{ parameters.llm }}
          llm_toleration: ${{ parameters.llm_toleration }}
          safety: ${{ parameters.safety }}
          safety_toleration: ${{ parameters.safety_toleration }}
          s3_bucket_name: ${{ parameters.s3_bucket_name }}
          endpoint_url: ${{ parameters.endpoint_url }}
          region: ${{ parameters.region }}
          enable_safety: ${{ parameters.enableSafety }}
    - id: publish-github
      name: Publish AI-virtual-agent-kickstart to Github
      action: publish:github
      if: ${{ parameters.hostType === 'GitHub' }}
      input:
        repoUrl: ${{ parameters.githubServer }}?owner=${{ parameters.repoOwner
          }}&repo=${{ parameters.repoName }}
        sourcePath: ./tenant
        allowedHosts:
          - ${{ parameters.githubServer }}
        description: This is source repository for ${{ parameters.name }}
        namespace: ${{ parameters.namespace }}
        repoVisibility: public
        defaultBranch: main
        protectDefaultBranch: false
    - id: publish-gitlab
      name: Publish ai-virtual-agent-kickstart to Gitlab
      action: publish:gitlab
      if: ${{ parameters.hostType === 'GitLab' }}
      input:
        repoUrl: ${{ parameters.gitlabServer }}?owner=${{ parameters.repoOwner
          }}&repo=${{ parameters.repoName }}
        sourcePath: ./tenant
        allowedHosts:
          - ${{ parameters.gitlabServer }}
        description: This is source repository for ${{ parameters.name }}
        namespace: ${{ parameters.namespace }}
        repoVisibility: public
        defaultBranch: main
        protectDefaultBranch: false
    - id: publish-github-gitops
      name: Publish ai-virtual-agent-kickstart GitOps to Github
      action: publish:github
      if: ${{ parameters.hostType === 'GitHub' }}
      input:
        repoUrl: ${{ parameters.githubServer }}?owner=${{ parameters.repoOwner
          }}&repo=${{ parameters.repoName }}-gitops
        sourcePath: ./tenant-gitops
        allowedHosts:
          - ${{ parameters.githubServer }}
        description: This is GitOps repository for ${{ parameters.name }}
        repoVisibility: public
        defaultBranch: main
        protectDefaultBranch: false
    - id: publish-gitlab-gitops
      name: Publish GitOps Repository to Gitlab
      action: publish:gitlab
      if: ${{ parameters.hostType === 'GitLab' }}
      input:
        repoUrl: ${{ parameters.gitlabServer }}?owner=${{ parameters.repoOwner
          }}&repo=${{ parameters.repoName }}-gitops
        sourcePath: ./tenant-gitops
        allowedHosts:
          - ${{ parameters.gitlabServer }}
        description: This is GitOps repository for ${{ parameters.name }}
        namespace: ${{ parameters.namespace }}
        repoVisibility: public
        defaultBranch: main
        protectDefaultBranch: false
    - id: wait-for-github-repository
      name: Waiting for Repository Availability
      action: debug:wait
      input:
        seconds: 3
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl:
          ${{ steps['publish-github-gitops'].output.repoContentsUrl if
          steps['publish-github-gitops'].output else
          steps['publish-gitlab-gitops'].output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml
    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.name }}-bootstrap
        argoInstance: ${{ parameters.argoInstance }}
        namespace: janus-argocd
        repoUrl:
          https://${{ parameters.githubServer if parameters.hostType === 'GitHub'
          else parameters.gitlabServer }}/${{ parameters.repoOwner }}/${{
          parameters.repoName }}-gitops.git
        path: argocd/
  output:
    links:
      - title: Source Repository
        url: ${{ steps['publish-github'].output.remoteUrl if
          steps['publish-github'].output else
          steps['publish-gitlab'].output.remoteUrl }}
      - title: GitOps Repository
        url: ${{ steps['publish-github-gitops'].output.remoteUrl if
          steps['publish-github-gitops'].output else
          steps['publish-gitlab-gitops'].output.remoteUrl }}
      - title: Open Component in Catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
      - title: Open GitOps Resource in Catalog
        icon: catalog
        entityRef: ${{ steps['register-gitops'].output.entityRef }}
